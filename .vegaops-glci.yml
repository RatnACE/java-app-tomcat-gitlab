# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Docker.gitlab-ci.yml

# Build a Docker image with CI/CD and push to the GitLab registry.
# Docker-in-Docker documentation: https://docs.gitlab.com/ee/ci/docker/using_docker_build.html
#
# This template uses one generic job with conditional builds
# for the default branch and all other (MR) branches.
stages:
  - build
  - package

project-build:
  image: maven:3.6.3-jdk-8
  stage: build
  variables:
    MAVEN_CLI_OPTS: "--batch-mode"
  script:
    - mvn $MAVEN_CLI_OPTS clean package  # Build the Maven project and generate the WAR file
    - mkdir -p pkg  # Create a 'pkg' directory if it doesn't exist
    - mv target/*.war pkg/  # Move the WAR file to the 'pkg' directory
    - echo "Maven build successful! WAR file moved to pkg directory."
  artifacts:
    paths:
      - pkg/*.war

docker-build:
  # Use the official docker image.
  image: docker:latest
  stage: package
  services:
   - name: docker:dind
     alias: thedockerhost

  variables:
    # Tell docker CLI how to talk to Docker daemon; see
    # https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#use-docker-in-docker-executor
    DOCKER_HOST: tcp://thedockerhost:2375/
    # Use the overlayfs driver for improved performance:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  #before_script:
  #  - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  # All branches are tagged with $DOCKER_IMAGE_NAME (defaults to commit ref slug)
  # Default branch is also tagged with `latest`
  script:
    - docker build -t my-java-app .  # Build Docker image from Dockerfile in the current directory
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY  # Login to GitLab Container Registry
    - docker tag my-java-app $CI_REGISTRY_IMAGE/my-java-app:latest  # Tag the Docker image
    - docker push $CI_REGISTRY_IMAGE/my-java-app:latest  # Push the Docker image to GitLab Container Registry
    